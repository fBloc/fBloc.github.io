"use strict";(self.webpackChunkbloc_doc=self.webpackChunkbloc_doc||[]).push([[2299],{224:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(2374);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,f=m["".concat(c,".").concat(d)]||m[d]||s[d]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4014:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var r=t(7283),o=t(3662),i=(t(2374),t(224)),a=["components"],l={sidebar_position:2},c="bloc-client-python",p={unversionedId:"blocDev/Python",id:"blocDev/Python",title:"bloc-client-python",description:"\u8bf7\u5728\u8fd9\u91cc\u67e5\u770b\u6700\u65b0\u6587\u6863\u3002",source:"@site/docs/blocDev/Python.md",sourceDirName:"blocDev",slug:"/blocDev/Python",permalink:"/docs/blocDev/Python",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"bloc-client-go",permalink:"/docs/blocDev/Go"},next:{title:"\u7528\u6237\u7aef\u529f\u80fd\u7b80\u4ecb",permalink:"/docs/category/\u7528\u6237\u7aef\u529f\u80fd\u7b80\u4ecb"}},u={},s=[{value:"Develop bloc function node tutorial",id:"develop-bloc-function-node-tutorial",level:2},{value:"prepare",id:"prepare",level:3},{value:"write bloc function node",id:"write-bloc-function-node",level:3},{value:"write unit test",id:"write-unit-test",level:3},{value:"report to the server",id:"report-to-the-server",level:3},{value:"total code",id:"total-code",level:3},{value:"Other references",id:"other-references",level:2}],m={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bloc-client-python"},"bloc-client-python"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\u672c\u9875\u9762\u7684\u6587\u6863\u5185\u5bb9\u53ef\u80fd\u4e0d\u662f\u6700\u65b0")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"\u8bf7\u5728",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc-client-python#readme"},"\u8fd9\u91cc"),"\u67e5\u770b\u6700\u65b0\u6587\u6863\u3002"))),(0,i.kt)("p",null,"The python language client SDK for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc"},"bloc"),"."),(0,i.kt)("p",null,"You can develop bloc's function node in python language based on this SDK."),(0,i.kt)("p",null,"First make sure you already have a knowledge of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc"},"bloc")," and already have deployed a local test bloc environment(see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc/blob/main/docs/guide/deploy_local_environment_guide.md"},"deploy a local bloc environment"),")."),(0,i.kt)("h2",{id:"develop-bloc-function-node-tutorial"},"Develop bloc function node tutorial"),(0,i.kt)("p",null,"Let's write a simple bloc function node which receive some integers and do a designated mathematical calculation to these integers."),(0,i.kt)("h3",{id:"prepare"},"prepare"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"create a python program directory and initial it:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir bloc_py_tryout && cd bloc_py_tryout\n"))),(0,i.kt)("li",{parentName:"ul"},"create virtual environment by yourself"),(0,i.kt)("li",{parentName:"ul"},"install sdk:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"pip install bloc_client\n")))),(0,i.kt)("h3",{id:"write-bloc-function-node"},"write bloc function node"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"first create a class which stand for the function node:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# math_calcu.py\nclass MathCalcu(FunctionInterface):\n")),(0,i.kt)("p",{parentName:"li"},"then the function node should implement the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc-client-python/blob/main/bloc_client/function_interface.py#L10"},"FunctionInterface"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"implement ipt_config() which defined function node's input params:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def ipt_config(self) -> List[FunctionIpt]:\n    return [\n        FunctionIpt(\n            key="numbers",\n            display="int numbers",\n            must=True,\n            components=[\n                IptComponent(\n                    value_type=ValueType.intValueType,  # input value should be int type\n                    formcontrol_type=FormControlType.FormControlTypeInput,  # frontend should use input\n                    hint="input integer numbers",  # hint for user\n                    allow_multi=True,  # multiple input is allowed\n                )\n            ]\n        ),\n        FunctionIpt(\n            key="arithmetic_operator",\n            display="choose arithmetic operators",\n            must=True,\n            components=[\n                IptComponent(\n                    value_type=ValueType.intValueType,\n                    hint="+/-/*/%",\n                    formcontrol_type=FormControlType.FormControlTypeSelect,  # frontend should use select\n                    select_options=[  # select options\n                        SelectOption(label=i.name, value=i.value) for i in ArithmeticOperators\n                    ],\n                    allow_multi=False,  # only allow single select value\n                ),\n            ]\n        )\n    ]\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"implement opt_config() which defined function node's opt:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def opt_config(self) -> List[FunctionOpt]:\n    # returned list type for a fixed order to show in the frontend which lead to a better user experience\n    return [\n        FunctionOpt(\n            key="result",\n            description="arithmetic operation result",\n            value_type=ValueType.intValueType,\n            is_array=False)\n    ]\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"implement all_progress_milestones() which define the highly readable describe milestones of the function node's run:"),(0,i.kt)("p",{parentName:"li"},"all_progress_milestones() is designed for long run function, during it is running, it can report it's current running milestone for the user in frontend to get the information.If your function is quick run. maybe no need to set it and just return blank."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def all_progress_milestones(self) -> List[str]:\n    return [\n        "parsing ipt", \n        "in calculation", \n        "finished"]\n')))),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"implement run() which do the real work:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def run(\n    self, \n    ipts: List[FunctionIpt], \n    queue: FunctionRunMsgQueue\n) -> FunctionRunOpt:\n    # logger msg will be reported to bloc-server and can be represent in the frontend\n    # which means during this function\'s running, the frontend can get the realtime log msg\n    queue.report_log(LogLevel.info, "start")\n\n    # AllProcessStages() index 0 - "parsing ipt". which will be represented in the frontend immediately.\n    queue.report_high_readable_progress(progress_milestone_index=0)\n\n    numbersSlice = ipts[0].components[0].value\n    if not numbersSlice:\n        queue.report_function_run_finished_opt(\n            FunctionRunOpt(\n                suc=False,  # function run failed\n                intercept_below_function_run=True,  # intercept flow\'s below function run (you can think like raise exception in the flow)\n                error_msg="parse ipt `numbers` failed",  # error description\n            )\n        )\n        # suc can be false and intercept_below_function_run can also be false\n        # which means this function node\'s fail should not intercept it\'s below function node\'s running\n        return\n\n    try:\n        operator = ArithmeticOperators(ipts[1].components[0].value)\n    except ValueError:\n        queue.report_function_run_finished_opt( \n            FunctionRunOpt(\n                suc=False, \n                intercept_below_function_run=True,\n                error_msg=f"""arithmetic_operator({ipts[1].components[0].value}) not in {list(map(lambda c: c.value, ArithmeticOperators))}"""\n            )\n        )\n        return\n    # AllProcessStages() index 1 - "in calculation". which also will be represented in the frontend immediately.\n    queue.report_high_readable_progress(progress_milestone_index=1)\n\n    ret = 0\n    if operator == ArithmeticOperators.addition:\n        ret = sum(numbersSlice)\n    elif operator == ArithmeticOperators.subtraction:\n        ret = numbersSlice[0] - sum(numbersSlice[1:])\n    elif operator == ArithmeticOperators.multiplication:\n        ret = numbersSlice[0]\n        for i in numbersSlice[1:]:\n            ret *= i\n    elif operator == ArithmeticOperators.multiplication:\n        ret = numbersSlice[0]\n        for i in numbersSlice[1:]:\n            ret //= i\n    \n    queue.report_high_readable_progress(progress_milestone_index=2)\n    queue.report_function_run_finished_opt(\n        FunctionRunOpt(\n            suc=True, \n            intercept_below_function_run=False,\n            description=f"received {len(numbersSlice)} number",\n            optKey_map_data={\n                \'result\': ret\n            }\n        )\n    )\n')))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"By now, we finished write the code of a bloc function node, next we will write unit test code to this function node")),(0,i.kt)("h3",{id:"write-unit-test"},"write unit test"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"write a simple unit test in ",(0,i.kt)("inlineCode",{parentName:"p"},"math_calcu_test.py"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# math_calcu_test.py\nimport unittest\n\nfrom bloc_client import *\n\nfrom math_calcu import MathCalcu\n\nclass TestMathCalcuNode(unittest.TestCase):\n    def setUp(self):\n        self.client = BlocClient.new_client("")\n\n    def test_add(self):\n        opt = self.client.test_run_function(\n            MathCalcu(),\n            [\n                [  # ipt 0\n                    [1, 2]  # component 0, numbers\n                ],\n                [  # ipt 1\n                    1  # "+" operater\n                ],\n            ]\n        )\n        assert isinstance(opt, FunctionRunOpt), "opt should be FunctionRunOpt type"\n        self.assertIsInstance(opt, FunctionRunOpt, "opt is not FunctionRunOpt type")\n        self.assertTrue(opt.suc, "should    suc")\n        self.assertFalse(opt.intercept_below_function_run, "should not intercept below function run")\n        self.assertEqual(opt.optKey_map_data[\'result\'], 3, "result should be 3")\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"if __name__ == '__main__':\n    unittest.main()\n```\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"python math_calcu_test.py"),", you will see the OK. which means your function run meet your expectation."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},"$ python math_calcu_test.py\n2022-05-20 17:46:39,989 INFO received log msg: FunctionRunMsg(level=<LogLevel.info: 'info'>, msg='start')\n2022-05-20 17:46:39,989 INFO progress msg: HighReadableFunctionRunProgress(progress_percent=None, msg=None, progress_milestone_index=0)\n2022-05-20 17:46:39,989 INFO progress msg: HighReadableFunctionRunProgress(progress_percent=None, msg=None, progress_milestone_index=1)\n2022-05-20 17:46:39,989 INFO progress msg: HighReadableFunctionRunProgress(progress_percent=None, msg=None, progress_milestone_index=2)\n2022-05-20 17:46:39,989 INFO run finished. opt is: FunctionRunOpt(suc=True, canceled=False, timeout_canceled=False, intercept_below_function_run=False, error_msg='', description='received 2 number', optKey_map_data={'result': 3}, optKey_map_objectStorageKey=None, optKey_map_briefData=None)\n.\n----------------------------------------------------------------------\nRan 1 test in 0.308s\n\nOK\n")))),(0,i.kt)("h3",{id:"report-to-the-server"},"report to the server"),(0,i.kt)("p",null,"After make sure your function runs well, you can deploy it to report to bloc."),(0,i.kt)("p",null,"I suppose you have already deployed a local bloc environment. if not, follow ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc/blob/main/docs/guide/deploy_local_environment_guide.md"},"guide")," to deploy it."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"During ",(0,i.kt)("inlineCode",{parentName:"p"},"bloc_py_tryout")," directory and make a ",(0,i.kt)("inlineCode",{parentName:"p"},"main.py")," file with content:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\n\nfrom bloc_client import BlocClient\n\nfrom math_calcu import MathCalcu\n\nasync def main():\n    client_name = "tryout-python"\n    bloc_client = BlocClient(name=client_name)\n\n    bloc_client.get_config_builder(\n    ).set_server(\n        "127.0.0.1", 8080,\n    ).set_rabbitMQ(\n        user="blocRabbit", password=\'blocRabbitPasswd\',\n        host="127.0.0.1", port=5672\n    ).build_up()\n\n    # create a function group\n    pyClient_func_group = bloc_client.register_function_group("math")\n    # register the function node to upper function group\n    pyClient_func_group.add_function(\n        "calcu", # name your function node\'s name\n        "receive numbers and do certain math operation to them", # the describe of your function node\n        MathCalcu(), # your function implement\n    )\n\n    await bloc_client.run()\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'if __name__ == "__main__":\n    asyncio.run(main())\n```\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"now run it:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ python run main.py\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"After suc run, this client's all function node are registered to the bloc-server, which can be see and operate in the frontend, and this client will receive bloc-server's trigger function to run msg and do the execute. If you are first to the bloc web, you may check this ",(0,i.kt)("a",{parentName:"p",href:"#todo"},"brief introduction to bloc web")))),(0,i.kt)("h3",{id:"total-code"},"total code"),(0,i.kt)("p",null,"you can find the demo code ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fBloc/bloc-client-python/tree/main/bloc_py_tryout"},"here")),(0,i.kt)("h2",{id:"other-references"},"Other references"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"you can find more bloc function node examples ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/fBloc/bloc-function-demo-py"},"here"))))}d.isMDXComponent=!0}}]);